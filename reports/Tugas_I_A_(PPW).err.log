Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# API Key Springer Nature
api_key = "bb5c8dcf4c49724ba77086b237793f86"

# daftar kata kunci
keywords = ["web mining", "web usage mining", "web structure mining"]

url = "https://api.springernature.com/meta/v2/json"

all_records = []

for kw in keywords:
    params = {
        "q": kw,
        "api_key": api_key,
        "p": 20
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        data = response.json()
        print(f"Kata kunci: {kw} | Total hasil: {data['result'][0]['total']}\n")

        for record in data['records']:
            doi = record.get('doi', 'N/A')
            title = record.get('title', 'No title')
            abstract = record.get('abstract', 'No abstract')

            print(f"DOI: {doi}")
            print(f"Title: {title}")
            print(f"Abstract: {abstract}\n")

            all_records.append({
                "Keyword": kw,
                "DOI": doi,
                "Title": title,
                "Abstract": abstract
            })
    else:
        print("Error:", response.status_code, response.text)

------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 18[39m
[32m     11[39m [38;5;28;01mfor[39;00m kw [38;5;129;01min[39;00m keywords:
[32m     12[39m     params = {
[32m     13[39m         [33m"[39m[33mq[39m[33m"[39m: kw,
[32m     14[39m         [33m"[39m[33mapi_key[39m[33m"[39m: api_key,
[32m     15[39m         [33m"[39m[33mp[39m[33m"[39m: [32m20[39m
[32m     16[39m     }
[32m---> [39m[32m18[39m     response = [43mrequests[49m.get(url, params=params)
[32m     20[39m     [38;5;28;01mif[39;00m response.status_code == [32m200[39m:
[32m     21[39m         data = response.json()

[31mNameError[39m: name 'requests' is not defined

